# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import control.im2control_pb2 as im2control__pb2

GRPC_GENERATED_VERSION = '1.65.1'
GRPC_VERSION = grpc.__version__
EXPECTED_ERROR_RELEASE = '1.66.0'
SCHEDULED_RELEASE_DATE = 'August 6, 2024'
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    warnings.warn(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in im2control_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
        + f' This warning will become an error in {EXPECTED_ERROR_RELEASE},'
        + f' scheduled for release on {SCHEDULED_RELEASE_DATE}.',
        RuntimeWarning
    )


class IM2ControlStub(object):
    """Interface exported by the server.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.TorqueControl = channel.unary_unary(
                '/im2control.IM2Control/TorqueControl',
                request_serializer=im2control__pb2.TorqueControlIn.SerializeToString,
                response_deserializer=im2control__pb2.Empty.FromString,
                _registered_method=True)
        self.PositionControl = channel.unary_unary(
                '/im2control.IM2Control/PositionControl',
                request_serializer=im2control__pb2.PositionControlIn.SerializeToString,
                response_deserializer=im2control__pb2.Empty.FromString,
                _registered_method=True)
        self.JointPDControl = channel.unary_unary(
                '/im2control.IM2Control/JointPDControl',
                request_serializer=im2control__pb2.JointPDControlIn.SerializeToString,
                response_deserializer=im2control__pb2.Empty.FromString,
                _registered_method=True)
        self.GetMaxTorques = channel.unary_unary(
                '/im2control.IM2Control/GetMaxTorques',
                request_serializer=im2control__pb2.Empty.SerializeToString,
                response_deserializer=im2control__pb2.NDArray.FromString,
                _registered_method=True)
        self.GetJointInitOffset = channel.unary_unary(
                '/im2control.IM2Control/GetJointInitOffset',
                request_serializer=im2control__pb2.Empty.SerializeToString,
                response_deserializer=im2control__pb2.NDArray.FromString,
                _registered_method=True)
        self.GetJointState = channel.unary_unary(
                '/im2control.IM2Control/GetJointState',
                request_serializer=im2control__pb2.String.SerializeToString,
                response_deserializer=im2control__pb2.JointState.FromString,
                _registered_method=True)
        self.GetEEPose = channel.unary_unary(
                '/im2control.IM2Control/GetEEPose',
                request_serializer=im2control__pb2.String.SerializeToString,
                response_deserializer=im2control__pb2.Pose.FromString,
                _registered_method=True)
        self.GetJacobian = channel.unary_unary(
                '/im2control.IM2Control/GetJacobian',
                request_serializer=im2control__pb2.String.SerializeToString,
                response_deserializer=im2control__pb2.Jacobian.FromString,
                _registered_method=True)
        self.Shutdown = channel.unary_unary(
                '/im2control.IM2Control/Shutdown',
                request_serializer=im2control__pb2.Empty.SerializeToString,
                response_deserializer=im2control__pb2.Boolean.FromString,
                _registered_method=True)
        self.SetGripperState = channel.unary_unary(
                '/im2control.IM2Control/SetGripperState',
                request_serializer=im2control__pb2.GripperControlIn.SerializeToString,
                response_deserializer=im2control__pb2.Empty.FromString,
                _registered_method=True)
        self.GetGripperState = channel.unary_unary(
                '/im2control.IM2Control/GetGripperState',
                request_serializer=im2control__pb2.String.SerializeToString,
                response_deserializer=im2control__pb2.Float.FromString,
                _registered_method=True)


class IM2ControlServicer(object):
    """Interface exported by the server.
    """

    def TorqueControl(self, request, context):
        """A RPC to control IM2 humanoid.

        Torque control the arm
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PositionControl(self, request, context):
        """Position control the arm
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def JointPDControl(self, request, context):
        """Joint PD control the arm
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMaxTorques(self, request, context):
        """Returns max torques for each joint
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetJointInitOffset(self, request, context):
        """Returns joint offset to match the motor-encoder readings to URDF convention
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetJointState(self, request, context):
        """Returns current position, velocity, and torque of joints
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetEEPose(self, request, context):
        """Returns position and orientation(quaternion) of End Effector in Robot frame
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetJacobian(self, request, context):
        """Returns linear and angular jacobians
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Shutdown(self, request, context):
        """Safely shutdowns the motors
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetGripperState(self, request, context):
        """Gripper control
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetGripperState(self, request, context):
        """Gripper state
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_IM2ControlServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'TorqueControl': grpc.unary_unary_rpc_method_handler(
                    servicer.TorqueControl,
                    request_deserializer=im2control__pb2.TorqueControlIn.FromString,
                    response_serializer=im2control__pb2.Empty.SerializeToString,
            ),
            'PositionControl': grpc.unary_unary_rpc_method_handler(
                    servicer.PositionControl,
                    request_deserializer=im2control__pb2.PositionControlIn.FromString,
                    response_serializer=im2control__pb2.Empty.SerializeToString,
            ),
            'JointPDControl': grpc.unary_unary_rpc_method_handler(
                    servicer.JointPDControl,
                    request_deserializer=im2control__pb2.JointPDControlIn.FromString,
                    response_serializer=im2control__pb2.Empty.SerializeToString,
            ),
            'GetMaxTorques': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMaxTorques,
                    request_deserializer=im2control__pb2.Empty.FromString,
                    response_serializer=im2control__pb2.NDArray.SerializeToString,
            ),
            'GetJointInitOffset': grpc.unary_unary_rpc_method_handler(
                    servicer.GetJointInitOffset,
                    request_deserializer=im2control__pb2.Empty.FromString,
                    response_serializer=im2control__pb2.NDArray.SerializeToString,
            ),
            'GetJointState': grpc.unary_unary_rpc_method_handler(
                    servicer.GetJointState,
                    request_deserializer=im2control__pb2.String.FromString,
                    response_serializer=im2control__pb2.JointState.SerializeToString,
            ),
            'GetEEPose': grpc.unary_unary_rpc_method_handler(
                    servicer.GetEEPose,
                    request_deserializer=im2control__pb2.String.FromString,
                    response_serializer=im2control__pb2.Pose.SerializeToString,
            ),
            'GetJacobian': grpc.unary_unary_rpc_method_handler(
                    servicer.GetJacobian,
                    request_deserializer=im2control__pb2.String.FromString,
                    response_serializer=im2control__pb2.Jacobian.SerializeToString,
            ),
            'Shutdown': grpc.unary_unary_rpc_method_handler(
                    servicer.Shutdown,
                    request_deserializer=im2control__pb2.Empty.FromString,
                    response_serializer=im2control__pb2.Boolean.SerializeToString,
            ),
            'SetGripperState': grpc.unary_unary_rpc_method_handler(
                    servicer.SetGripperState,
                    request_deserializer=im2control__pb2.GripperControlIn.FromString,
                    response_serializer=im2control__pb2.Empty.SerializeToString,
            ),
            'GetGripperState': grpc.unary_unary_rpc_method_handler(
                    servicer.GetGripperState,
                    request_deserializer=im2control__pb2.String.FromString,
                    response_serializer=im2control__pb2.Float.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'im2control.IM2Control', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('im2control.IM2Control', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class IM2Control(object):
    """Interface exported by the server.
    """

    @staticmethod
    def TorqueControl(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/im2control.IM2Control/TorqueControl',
            im2control__pb2.TorqueControlIn.SerializeToString,
            im2control__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PositionControl(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/im2control.IM2Control/PositionControl',
            im2control__pb2.PositionControlIn.SerializeToString,
            im2control__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def JointPDControl(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/im2control.IM2Control/JointPDControl',
            im2control__pb2.JointPDControlIn.SerializeToString,
            im2control__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetMaxTorques(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/im2control.IM2Control/GetMaxTorques',
            im2control__pb2.Empty.SerializeToString,
            im2control__pb2.NDArray.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetJointInitOffset(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/im2control.IM2Control/GetJointInitOffset',
            im2control__pb2.Empty.SerializeToString,
            im2control__pb2.NDArray.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetJointState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/im2control.IM2Control/GetJointState',
            im2control__pb2.String.SerializeToString,
            im2control__pb2.JointState.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetEEPose(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/im2control.IM2Control/GetEEPose',
            im2control__pb2.String.SerializeToString,
            im2control__pb2.Pose.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetJacobian(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/im2control.IM2Control/GetJacobian',
            im2control__pb2.String.SerializeToString,
            im2control__pb2.Jacobian.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Shutdown(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/im2control.IM2Control/Shutdown',
            im2control__pb2.Empty.SerializeToString,
            im2control__pb2.Boolean.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetGripperState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/im2control.IM2Control/SetGripperState',
            im2control__pb2.GripperControlIn.SerializeToString,
            im2control__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetGripperState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/im2control.IM2Control/GetGripperState',
            im2control__pb2.String.SerializeToString,
            im2control__pb2.Float.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
